@page "/"
@using Cuebit.Models
@inject IJSRuntime JsRuntime
<div>
    <h2>
        Lets Break Causality!
    </h2>
    <br/>
    <button @onclick="BigTicker" disabled="@tickDisabled">Run Tick</button> <button @onclick="Reset">Reset</button> RNG Seed: <input type="text" @bind="RngSeed"/> <button @onclick="RandomizeSeed">Randomize and Reset</button> 
    <br/>
    <br/>
    <h3>
        Clock Graph
    </h3>
    <table class="graph">
        <tr>
            <th>
                Tick
            </th>
            @foreach (var tick in SystemData)
            {
                <th>
                    @tick.ClockStep
                </th>
            }
        </tr>
        <tr>
            <th>
                A0X
            </th>
            @foreach (var tick in SystemData)
            {
                <td class="@(tick.ClockValue == 1 ? "" : "not-my-turn")">
                    @tick.A0X
                </td>
            }
        </tr>
        <tr>
            <th>
                A0Z
            </th>
            @foreach (var tick in SystemData)
            {
                <td class="@(tick.ClockValue == 1 ? "" : "not-my-turn")">
                    @tick.A0Z
                </td>
            }
        </tr>
        <tr>
            <th>
                A1X
            </th>
            @foreach (var tick in SystemData)
            {
                <td class="@(tick.ClockValue == 1 ? "" : "not-my-turn")">
                    @tick.A1X
                </td>
            }
        </tr>
        <tr>
            <th>
                A1Z
            </th>
            @foreach (var tick in SystemData)
            {
                <td class="@(tick.ClockValue == 1 ? "" : "not-my-turn")">
                    @tick.A1Z
                </td>
            }
        </tr>
        <tr>
            <th>
                CLK
            </th>
            @foreach (var tick in SystemData)
            {
                <td class="@(tick.ClockValue == 1 ? "clock-up" : "clock-down")">
                    &nbsp;
                </td>
            }
        </tr>
        <tr>
            <th>
                B0X
            </th>
            @foreach (var tick in SystemData)
            {
                <td class="@(tick.ClockValue == 0 ? "" : "not-my-turn")">
                    @tick.B0X
                </td>
            }
        </tr>
        <tr>
            <th>
                B0Z
            </th>
            @foreach (var tick in SystemData)
            {
                <td class="@(tick.ClockValue == 0 ? "" : "not-my-turn")">
                    @tick.B0Z
                </td>
            }
        </tr>
        <tr>
            <th>
                B1X
            </th>
            @foreach (var tick in SystemData)
            {
                <td class="@(tick.ClockValue == 0 ? "" : "not-my-turn")">
                    @tick.B1X
                </td>
            }
        </tr>
        <tr>
            <th>
                B1Z
            </th>
            @foreach (var tick in SystemData)
            {
                <td class="@(tick.ClockValue == 0 ? "" : "not-my-turn")">
                    @tick.B1Z
                </td>
            }
        </tr>
    </table>
    <br/>
    <h3>
        Tick Log
    </h3>
    <div class="log" id="tick-log">
        <table>
            @foreach (var log in ActionLog)
            {
                <tr>
                    <td>
                        @log
                    </td>
                </tr>
            }
        </table>    
    </div>
    
</div>

@code{

    int RngSeed = Environment.TickCount;
    Random Rng = new();
    List<TickData> SystemData { get; set; } = new();
    TickData BobsLastTurn = null;
    Clock Clock { get; set; } = new();
    Qubit Alice0 = new();
    Qubit Alice1 = new();
    Qubit Bob0 = new();
    Qubit Bob1 = new();

    bool AliceSetTheReadyBit = false;
    bool AliceSetTheValueBit = false;
    bool BobReadTheReadyBit = false;

    List<string> ActionLog { get; set; } = new();
    bool tickDisabled;

    protected override void OnInitialized()
    {
        RngSeed = Rng.Next();
        Reset();
    }

    void Reset()
    {
        Rng = new(RngSeed);
        
        ActionLog = new List<string>();
        SystemData = new List<TickData>();
        Clock = new Clock();

        Alice0 = new Qubit(Rng);
        Alice1 = new Qubit(Rng);
        Bob0 = new Qubit(Rng);
        Bob1 = new Qubit(Rng);

        Alice0.EntangledQubit = Bob0;
        Bob0.EntangledQubit = Alice0;

        Alice1.EntangledQubit = Bob1;
        Bob1.EntangledQubit = Alice1;

        AliceSetTheReadyBit = false;
        AliceSetTheValueBit = false;
        BobReadTheReadyBit = false;
        tickDisabled = false;
        
        //Random starting points
        Alice0.MeasureZ();
        Alice0.MeasureX();
        Alice0.MeasureY();
        Alice1.MeasureZ();
        Alice1.MeasureX();
        Alice1.MeasureY();

    }

    void RandomizeSeed()
    {
        RngSeed = new Random().Next();
        Reset();
    }
    
    async Task Log(string msg)
    {
        ActionLog.Add(msg);
        await JsRuntime.InvokeVoidAsync("scrollLog");
    }

    void StoreNewData()
    {
        var data = new TickData
        {
            A0X = Alice0.X,
            A0Z = Alice0.Z,
            A1X = Alice1.X,
            A1Z = Alice1.Z,
            B0X = Bob0.X,
            B0Z = Bob0.Z,
            B1X = Bob1.X,
            B1Z = Bob1.Z,
            ClockStep = Clock.Step,
            ClockValue = Clock.Value
        };

        if (Clock.Step == 0 || Clock.Value == 0)
            BobsLastTurn = data;
        
        SystemData.Add(data);
    }

    async Task BigTicker()
    {
        // The important thing here is the order in which things are measured
        // A0X, A0Z, A1X, A1Z, B0X, B0Z, B1X, B1Z then tick

        await Log("-----------");
        await Log($"Starting tick {Clock.Step}");

        if (Clock.Step == 0)
        {
            await InitialTick();
        }
        else if (Clock.Value == 1)
        {
            await Log("Alice's turn");
            await MeasureAlice();
        }
        else
        {
            await Log("Bob's turn");
            await MeasureBob();
        }

        StoreNewData();
        Clock.Tick();
        await Log("End of turn");
    }

    async Task InitialTick()
    {
        await Log($"Initial tick!");
        await Log("Alice wants to send Bob a 1");
        await Log("Alice only reads her Z bits on the initial tick");
        Alice0.MeasureZ();
        Alice1.MeasureZ();
    }

    async Task MeasureAlice()
    {
        if (!AliceSetTheValueBit)
        {
            await AliceThrashForValueBit();
            return;
        }
        await AliceThrashForReadyBit();
    }

    async Task AliceThrashForValueBit()
    {
        //Lets assume Alice wants to send a 1.
        //We need to get the A1Z to be a 1
        //Alice is going to measure X to reset Z, then measure Z for N ticks until it's the bit she wants.
        await Log("Alice is thrashing her Value bit");
        Alice1.MeasureX();
        Alice1.MeasureZ();

        if (Alice1.Z == 0) //The value we want is opposite of what we want to send Bob
        {
            await Log("Alice finally set her Value bit to what she wanted");
            AliceSetTheValueBit = true;
        }
    }

    async Task AliceThrashForReadyBit()
    {
        await Log("Alice is thrashing the Ready bit");
        var lastReadyBit = Alice0.Z;

        Alice0.MeasureX();
        Alice0.MeasureZ();

        if (Alice0.Z != lastReadyBit)
        {
            await Log("Alice finally swapped the Ready bit, telling Bob the value is ready");
            AliceSetTheReadyBit = true;
        }
    }

    async Task MeasureBob()
    {
        var lastReadyBit = BobsLastTurn.B0Z;
        Bob0.MeasureZ();

        if (Bob0.Z != lastReadyBit)
        {
            await Log("Bob's ready bit changed! Lets read data!");
            BobReadTheReadyBit = true;
            Bob1.MeasureZ();
            tickDisabled = true;
            await Log($"We did it! Bob measured {Bob1.Z}");
        }
        else
        {
            await Log("Bob's ready bit didn't change");
        }
    }
}